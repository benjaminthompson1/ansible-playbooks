################################################################################
# Playbook Name: DBB COBOL Datasets Creation
#
# Purpose:
#   This playbook automates the creation or replacement of DBB-specific z/OS 
#   datasets using the IBM z/OS Core Collection. It creates datasets for COBOL,
#   COPY, DBRM, BMS, LINK, OBJ, and LOAD libraries.
#
# Requirements:
#   - Ansible 2.9 or higher
#   - IBM z/OS Core Collection (ibm.ibm_zos_core) installed
#   - Access to z/OS system with appropriate permissions
#   - Proper setup of Ansible inventory file with z/OS target information
#
# Usage:
#   Basic execution:
#     ansible-playbook -i <inventory_file> dbb_create_COBOL_datasets.yml
#
#   With increased verbosity:
#     ansible-playbook -i <inventory_file> dbb_create_COBOL_datasets.yml -v
#
# Variables:
#   hlq: High-level qualifier for datasets (default: IBMUSER.DBB)
#   primary_space: Primary space allocation (default: 1CYL)
#   secondary_space: Secondary space allocation (default: 1CYL)
#   record_length: Record length for FB datasets (default: 80)
#
# Notes:
#   - Ensure that the necessary permissions and system access are in place before running.
#   - The playbook will replace existing datasets if they already exist.
#   - Debug messages are displayed only in verbose mode (-v).
#   - The playbook includes error handling for dataset creation tasks.
#
# Examples:
#   1. Run the playbook with default settings:
#      ansible-playbook -i inventories/inventory.yml dbb_create_COBOL_datasets.yml
#
#   2. Run the playbook with verbose output:
#      ansible-playbook -i inventories/inventory.yml dbb_create_COBOL_datasets.yml -v
#
#   3. Run the playbook with custom HLQ and space allocations:
#      ansible-playbook -i inventories/inventory.yml dbb_create_COBOL_datasets.yml -e "hlq=TEST.DBB primary_space=2CYL secondary_space=1CYL"
#
################################################################################

---
- name: Create DBB COBOL Datasets
  hosts: ben_s0w1
  collections:
    - ibm.ibm_zos_core
  gather_facts: no

  vars:
    hlq: IBMUSER.DBB
    primary_space: 1CYL
    secondary_space: 1CYL
    record_length: 80

  environment: "{{ environment_vars }}"

  tasks:
    - name: Verify connectivity
      zos_ping:
      register: zos_ping_result

    - name: Display ping response
      debug:
        var: zos_ping_result
        verbosity: 1

    - name: Create DBB datasets
      block:
        - name: Create FB format datasets
          zos_data_set:
            name: "{{ hlq }}.{{ item }}"
            type: LIBRARY
            state: present
            format: fb
            size: "{{ primary_space }}"
            secondary: "{{ secondary_space }}"
            record_length: "{{ record_length }}"
            replace: yes
          loop:
            - COBOL
            - COPY
            - DBRM
            - BMS
            - LINK
            - OBJ
          register: fb_datasets_result

        - name: Create LOAD dataset (U format)
          zos_data_set:
            name: "{{ hlq }}.LOAD"
            type: LIBRARY
            state: present
            format: u
            size: "{{ primary_space }}"
            secondary: "{{ secondary_space }}"
            record_length: 0
            replace: yes
          register: load_dataset_result

      rescue:
        - name: Handle dataset creation errors
          debug:
            msg: "Error occurred during dataset creation: {{ ansible_failed_result }}"
          failed_when: true

      always:
        - name: Display dataset creation results
          debug:
            msg: 
              - "FB format datasets creation result: {{ fb_datasets_result }}"
              - "LOAD dataset creation result: {{ load_dataset_result }}"
            verbosity: 1

    - name: Verify dataset creation
      zos_data_set:
        name: "{{ hlq }}.{{ item }}"
        type: LIBRARY
      loop:
        - COBOL
        - COPY
        - DBRM
        - BMS
        - LINK
        - OBJ
        - LOAD
      register: verify_result

    - name: Display task summary
      debug:
        msg:
          - "Playbook execution summary:"
          - "- Connectivity check result: {{ zos_ping_result.ping }}"
          - "- Datasets created:"
          - "  {% for item in verify_result.results %}"
          - "  - {{ item.name }}: {{ 'Created' if item.changed else 'Already existed' }}"
          - "  {% endfor %}"
        verbosity: 0

    - name: Final status check
      assert:
        that:
          - zos_ping_result.ping == "pong"
          - verify_result.results | map(attribute='exists') | list | unique | length == 1
          - verify_result.results | map(attribute='exists') | list | unique | first == true
        fail_msg: "Playbook execution failed. Check the summary for details."
        success_msg: "Playbook executed successfully. All DBB datasets created and verified."