################################################################################
# Playbook: SMP/E ZFS Setup
# Purpose: Creates and mounts SMP/E ZFS filesystem on z/OS
# Usage: ansible-playbook -i inventories/inventory.yml smpe_zfs_setup.yml
# Prerequisites: 
#   - IBM z/OS Core collection installed
#   - Valid z/OS credentials configured
#   - Appropriate permissions for ZFS operations
################################################################################
---
- name: SMP/E ZFS Setup
  hosts: z31c_s0w1
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  vars:
    zfs_name: SMPE.SMPNTS.ZFS
    mount_point: /u/smpe/smpnts
    primary_space: 100
    secondary_space: 50
    dir_mode: '0755'
    max_retries: 3
    retry_delay: 10
    
  environment: "{{ environment_vars }}"
  
  tasks:
    - name: Verify connectivity
      zos_ping:
      register: ping_result
      failed_when: ping_result.failed
      
    - name: Check if mount point exists
      stat:
        path: "{{ mount_point }}"
      register: mount_point_stat
      
    - name: Unmount and delete existing ZFS if present
      block:
        - name: Unmount existing ZFS
          zos_tso_command:
            commands: 
              - "UNMOUNT FILESYSTEM('{{ zfs_name }}')"
          
        - name: Delete existing ZFS
          zos_tso_command:
            commands:
              - "DELETE '{{ zfs_name }}'"
      ignore_errors: true
        
    - name: Create and format ZFS
      block:
        - name: Create ZFS using TSO command
          zos_tso_command:
            commands: 
              - "DEFINE CLUSTER(NAME('{{ zfs_name }}') LINEAR ZFS CYL({{ primary_space }} {{ secondary_space }}))"
          register: define_result
          
        - name: Format ZFS
          zos_tso_command:
            commands:
              - "IOEAGFMT -aggregate '{{ zfs_name }}' -compat"
          register: format_result
      
    - name: Create mount point directory
      file:
        path: "{{ mount_point }}"
        state: directory
        mode: "{{ dir_mode }}"
        recurse: yes
      when: not mount_point_stat.stat.exists
      
    - name: Mount ZFS
      zos_mount:
        src: "{{ zfs_name }}"
        path: "{{ mount_point }}"
        fs_type: "zfs"
        state: mounted
      register: mount_result
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      until: mount_result is not failed
      
    - name: Verify ZFS mount
      shell: df -k "{{ mount_point }}"
      register: df_result
      failed_when: mount_point not in df_result.stdout
      
    - name: Display setup summary
      debug:
        msg: 
          - "SMP/E ZFS setup completed successfully:"
          - "- ZFS dataset: {{ zfs_name }}"
          - "- Mount point: {{ mount_point }}"
          - "- Primary space: {{ primary_space }} CYL"
          - "- Secondary space: {{ secondary_space }} CYL"
      when: mount_result is success
      
    - name: Display setup failure
      debug:
        msg: "SMP/E ZFS setup failed. Check previous task results for details."
      when: mount_result is failed
