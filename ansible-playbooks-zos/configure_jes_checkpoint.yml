################################################################################
# Playbook Name: JES Checkpoint Configuration
#
# Purpose:
#   This playbook automates the configuration of JES2 checkpoints on a z/OS system.
#   It performs the following tasks:
#   - Verifies connectivity to the target host
#   - Alters JES JOBCLASS for STC
#   - Deletes and recreates JES2 checkpoint datasets
#   - Updates JES2 configuration to use new checkpoint datasets
#   - Updates JES2PARM and JES2 PROC in USER.PARMLIB and USER.PROCLIB
#
# Requirements:
#   - Ansible 2.9 or higher
#   - IBM z/OS Core Collection (ibm.ibm_zos_core) installed
#   - Access to z/OS system with appropriate permissions
#   - Proper setup of Ansible inventory file with z/OS target information
#
# Usage:
#   Basic execution:
#     ansible-playbook -i <inventory_file> configure_jes_checkpoint.yml
#
#   With increased verbosity:
#     ansible-playbook -i <inventory_file> configure_jes_checkpoint.yml -v
#
# Variables:
#   adcd_ver: ADCD version (default: Z31A)
#   ckpt_volume: Volume for checkpoint datasets (default: A3SYS1)
#
# Notes:
#   - Ensure that the necessary permissions and system access are in place before running.
#   - Review and adjust variables as needed for your environment.
#   - The playbook includes error handling for critical operations.
#   - Debug messages are displayed only in verbose mode (-v).
#
# Examples:
#   1. Run the playbook with default settings:
#      ansible-playbook -i inventory.ini configure_jes_checkpoint.yml
#
#   2. Run the playbook with verbose output:
#      ansible-playbook -i inventory.ini configure_jes_checkpoint.yml -v
#
#   3. Run the playbook with custom ADCD version and checkpoint volume:
#      ansible-playbook -i inventory.ini configure_jes_checkpoint.yml -e "adcd_ver=Z32A ckpt_volume=SYSVOL"
#
################################################################################

---
- name: JES Checkpoint Configuration
  hosts: z31a_s0w1
  collections:
    - ibm.ibm_zos_core
  gather_facts: no

  vars:
    adcd_ver: Z31A
    ckpt_volume: A3SYS1

  environment: "{{ environment_vars }}"

  tasks:
    - name: Verify connectivity
      zos_ping:
      register: zos_ping_result

    - name: Display ping response
      debug:
        var: zos_ping_result
        verbosity: 1

    - name: Alter JES JOBCLASS for STC
      zos_operator:
        cmd: "$T JOBCLASS(STC),OUTDISP=(HOLD,HOLD)"
      register: jobclass_result

    - name: Manage JES2 checkpoint datasets
      block:
        - name: Delete existing JES CKPT datasets
          zos_tso_command:
            commands:
              - DELETE 'SYS1.{{ adcd_ver }}.CKPT1'
              - DELETE 'SYS1.{{ adcd_ver }}.CKPT2'
          ignore_errors: true

        - name: Allocate new JES CKPT datasets
          zos_tso_command:
            commands:
              - ALLOC DA('SYS1.{{ adcd_ver }}.CKPT1') DSORG(PSU) SPACE(300,0) TRACKS VOLUME({{ ckpt_volume }}) UNIT(SYSDA)
              - ALLOC DA('SYS1.{{ adcd_ver }}.CKPT2') DSORG(PSU) SPACE(300,0) TRACKS VOLUME({{ ckpt_volume }}) UNIT(SYSDA)
          register: ckpt_alloc_result
      rescue:
        - name: Log checkpoint dataset management errors
          debug:
            msg: "Error occurred during checkpoint dataset management: {{ ansible_failed_result }}"

    - name: Update JES2 configuration
      block:
        - name: Alter CKPTDEF for new checkpoint datasets
          zos_operator:
            cmd: "{{ item }}"
          loop:
            - "$T CKPTDEF,NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT1,VOLSER={{ ckpt_volume }})"
            - "$T CKPTDEF,NEWCKPT2=(DSNAME=SYS1.{{ adcd_ver }}.CKPT2,VOLSER={{ ckpt_volume }})"
            - "$T CKPTDEF,OPVERIFY=NO"
          register: ckptdef_result
      rescue:
        - name: Log JES2 configuration update errors
          debug:
            msg: "Error occurred during JES2 configuration update: {{ ansible_failed_result }}"

    - name: Update JES2PARM in USER.PARMLIB
      block:
        - name: Copy JES2PARM from ADCD to USER PARMLIB
          zos_copy:
            src: "ADCD.{{ adcd_ver }}.PARMLIB(JES2PARM)"
            dest: "USER.{{ adcd_ver }}.PARMLIB(JES2PARM)"
            remote_src: true

        - name: Insert NEWCKPT datasets in JES2PARM
          zos_blockinfile:
            src: "USER.{{ adcd_ver }}.PARMLIB(JES2PARM)"
            marker: "/* {mark} ANSIBLE MANAGED BLOCK */"
            insertafter: "MODE=DUPLEX,"
            block: |
              NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT1,VOLSER={{ ckpt_volume }}),
              NEWCKPT2=(DSNAME=SYS1.{{ adcd_ver }}.CKPT2,VOLSER={{ ckpt_volume }}),
              OPVERIFY=NO,
          register: jes2parm_result
      rescue:
        - name: Log JES2PARM update errors
          debug:
            msg: "Error occurred during JES2PARM update: {{ ansible_failed_result }}"

    - name: Update JES2 PROC in USER.PROCLIB
      block:
        - name: Copy JES2 PROC from ADCD to USER PROCLIB
          zos_copy:
            src: "ADCD.{{ adcd_ver }}.PROCLIB(JES2)"
            dest: "USER.{{ adcd_ver }}.PROCLIB(JES2)"
            remote_src: true

        - name: Update JES2 PROC HASPPARM DD to use USER HLQ
          zos_lineinfile:
            src: "USER.{{ adcd_ver }}.PROCLIB(JES2)"
            regexp: "^//HASPPARM"
            line: "//HASPPARM  DD   DSN=USER.&SYSVER..PARMLIB(&MEMBER),DISP=SHR"
          register: jes2proc_result
      rescue:
        - name: Log JES2 PROC update errors
          debug:
            msg: "Error occurred during JES2 PROC update: {{ ansible_failed_result }}"

    - name: Display task results
      debug:
        msg:
          - "JES JOBCLASS alteration result: {{ jobclass_result }}"
          - "JES CKPT dataset allocation result: {{ ckpt_alloc_result }}"
          - "CKPTDEF alteration result: {{ ckptdef_result }}"
          - "JES2PARM update result: {{ jes2parm_result }}"
          - "JES2 PROC update result: {{ jes2proc_result }}"
        verbosity: 1