###############################################################################
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventory base_jes.yml
#  ansible-playbook -i inventory base_jes.yml -v
###############################################################################
---
- hosts: ben_s0w1
  collections:
    - ibm.ibm_zos_core
  gather_facts: no

  vars:
    adcd_ver: Z25A
    ckpt_volume: A5SYS1

  environment: "{{ environment_vars }}"

  tasks:
    - name: Ping using zos_ping
      zos_ping:
      register: zos_ping_result

    - name: Response from zos_ping
      debug:
        msg: "{{ zos_ping_result }}"

###############################################################################
# Usage:
#  Dynamicly alter the JES JOBCLASS for STC 
#  $T JOBCLASS(STC),OUTDISP=(HOLD,HOLD)
###############################################################################

    - name: Alter JOBCASS STC OUTDISP.
      zos_operator:
        cmd: "$T JOBCLASS(STC),OUTDISP=(HOLD,HOLD)"
      register: zos_operator_result

    - name: DEBUG(-v) Response from Alter JOBCASS STC OUTDISP.
      debug:
        msg: "{{ zos_operator_result }} with verbosity 1"
        verbosity: 1

###############################################################################
# Usage:
#  Delete and re-create the JES2 checkpoint datasets
#  SYS1.{{ adcd_ver }}.CKPT1
#  SYS1.{{ adcd_ver }}.CKPT2
###############################################################################

    - name: Delete JES CKPT datasets incase the already exist.
      zos_tso_command:
        commands:
          - DELETE 'SYS1.{{ adcd_ver }}.CKPT1'
          - DELETE 'SYS1.{{ adcd_ver }}.CKPT2'
      ignore_errors: true
      register: zos_tso_command_result

    - name: DEBUG(-v) Response from Delete JES CKPT datasets incase the already exist.
      debug:
        msg: "{{ zos_tso_command_result }} with verbosity 1"
        verbosity: 1

    - name: Allocate JES CKPT datasets.
      zos_tso_command:
        commands:
          - ALLOC DA('SYS1.{{ adcd_ver }}.CKPT1') DSORG(PSU) SPACE(300,0) TRACKS VOLUME({{ ckpt_volume }}) UNIT(SYSDA)
          - ALLOC DA('SYS1.{{ adcd_ver }}.CKPT2') DSORG(PSU) SPACE(300,0) TRACKS VOLUME({{ ckpt_volume }}) UNIT(SYSDA)
      register: zos_tso_command_result

    - name: DEBUG(-v) Response from Allocate JES CKPT datasets.
      debug:
        msg: "{{ zos_tso_command_result }} with verbosity 1"
        verbosity: 1

###############################################################################
# Usage:
#  Dynamicly alter the JES to add the new checkpoint datasets and supress verification
#  $T CKPTDEF,NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT1,VOLSER={{ ckpt_volume }}
#  $T CKPTDEF,NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT2,VOLSER={{ ckpt_volume }}
#  $T CKPTDEF,OPVERIFY=NO
###############################################################################

    - name: Alter CKPTDEF NEWCKPT1.
      zos_operator:
        cmd: "$T CKPTDEF,NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT1,VOLSER={{ ckpt_volume }})"
      register: zos_operator_result

    - name: DEBUG(-v) Response from Alter CKPTDEF NEWCKPT1.
      debug:
        msg: "{{ zos_operator_result }} with verbosity 1"
        verbosity: 1

    - name: Alter CKPTDEF NEWCKPT2.
      zos_operator:
        cmd: "$T CKPTDEF,NEWCKPT2=(DSNAME=SYS1.{{ adcd_ver }}.CKPT2,VOLSER={{ ckpt_volume }})"
      register: zos_operator_result

    - name: DEBUG(-v) Response from Alter CKPTDEF NEWCKPT2.
      debug:
        msg: "{{ zos_operator_result }} with verbosity 1"
        verbosity: 1

    - name: Alter CKPTDEF suppressing operator verification.
      zos_operator:
        cmd: "$T CKPTDEF,OPVERIFY=NO"
      register: zos_operator_result

    - name: DEBUG(-v) Response from Alter CKPTDEF suppressing operator verification.
      debug:
        msg: "{{ zos_operator_result }} with verbosity 1"
        verbosity: 1

###############################################################################
# Usage:
#  Copy ADCD.{{ adcd_ver }}.PARMLIB(JES2PARM) to USER.{{ adcd_ver }}.PARMLIB(JES2PARM)
#  Update JESPARM with the new checkpoint datasets and supress verification
###############################################################################

    - name: Copy JES2PARM from ADCD to USER; replace if it already exists.
      zos_copy:
        src: ADCD.{{ adcd_ver }}.PARMLIB(JES2PARM)
        dest: USER.{{ adcd_ver }}.PARMLIB(JES2PARM)
        remote_src: true
      register: zos_copy_result

    - name: DEBUG(-v) Response from Copy JES2PARM from ADCD to USER.
      debug:
        msg: "{{ zos_copy_result }} with verbosity 1"
        verbosity: 1

    - name: Insert NEWXKPT datasets in JES2PARM.
      zos_blockinfile:
        src: USER.{{ adcd_ver }}.PARMLIB(JES2PARM)
        marker: "/* {mark} ANSIBLE MANAGED BLOCK */"
        insertafter: "MODE=DUPLEX,"
        block: |
          NEWCKPT1=(DSNAME=SYS1.{{ adcd_ver }}.CKPT1,VOLSER={{ ckpt_volume }}),
          NEWCKPT2=(DSNAME=SYS1.{{ adcd_ver }}.CKPT2,VOLSER={{ ckpt_volume }}),
          OPVERIFY=NO,
      register: zos_blockinfile_result

    - name: DEBUG(-v) Response from Insert NEWXKPT datasets in JES2PARM.
      debug:
        msg: "{{ zos_blockinfile_result }} with verbosity 1"
        verbosity: 1

###############################################################################
# Usage:
#  Copy ADCD.{{ adcd_ver }}.PROCLIB(JES2) to USER.{{ adcd_ver }}.PROCLIB(JES2)
#  Update JES2 PROC HASPPARM DD to refernce altered JES2PARM
###############################################################################

    - name: Copy JES2 PROC from ADCD to USER; replace if it already exists.
      zos_copy:
        src: ADCD.{{ adcd_ver }}.PROCLIB(JES2)
        dest: USER.{{ adcd_ver }}.PROCLIB(JES2)
        remote_src: true
      register: zos_copy_result

    - name: DEBUG(-v) Response from Copy JES2 PROC from ADCD to USER.
      debug:
        msg: "{{ zos_copy_result }} with verbosity 1"
        verbosity: 1

    - name: Update JES2 PROC HASPPARM DD to use USER HLQ.
      zos_lineinfile:
        src: USER.{{ adcd_ver }}.PROCLIB(JES2)
        regexp: "^//HASPPARM"
        line: "//HASPPARM  DD   DSN=USER.&SYSVER..PARMLIB(&MEMBER),DISP=SHR"
      register: zos_lineinfile_result

    - name: DEBUG(-v) Response from Update JES2 PROC HASPPARM DD to use USER HLQ.
      debug:
        msg: "{{ zos_lineinfile_result }} with verbosity 1"
        verbosity: 1